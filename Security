-->Security<--

##List the service accounts in your cluster:##
kubectl get serviceaccounts

##Create a new jenkins service account:##
kubectl create serviceaccount jenkins

##Use the abbreviated version of serviceAccount:##
kubectl get sa

##View the YAML for our service account:##
kubectl get serviceaccounts jenkins -o yaml

##View the secrets in your cluster:##
kubectl get secret [secret_name]

##The YAML for a busybox pod using the jenkins service account:##
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  serviceAccountName: jenkins
  containers:
  - image: busybox:1.28.4
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always

##Create a new pod with the service account:##
kubectl apply -f busybox.yaml

#View the cluster config that kubectl uses:##
kubectl config view

##View the config file:##
cat ~/.kube/config

##Set new credentials for your cluster:##
kubectl config set-credentials chad --username=chad --password=password

##Create a role binding for anonymous users (not recommended):##
kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=system:anonymous

##SCP the certificate authority to your workstation or server:##
scp ca.crt cloud_user@[pub-ip-of-remote-server]:~/

##Set the cluster address and authentication:##
kubectl config set-cluster kubernetes --server=https://172.31.41.61:6443 --certificate-authority=ca.crt --embed-certs=true

##Set the credentials for Chad:##
kubectl config set-credentials chad --username=chad --password=password

##Set the context for the cluster:##
kubectl config set-context kubernetes --cluster=kubernetes --user=chad --namespace=default

##Use the context:##
kubectl config use-context kubernetes

##Create a new namespace:##
kubectl create ns web

##The YAML for a service role:##
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: web
  name: service-reader
rules:
- apiGroups: [""]
  verbs: ["get", "list"]
  resources: ["services"]

##Create a RoleBinding:##
kubectl create rolebinding test --role=service-reader --serviceaccount=web:default -n web

##Run a proxy for inter-cluster communications:##
kubectl proxy

##Try to access the services in the web namespace:##
curl localhost:8001/api/v1/namespaces/web/services

##Create a ClusterRole to access PersistentVolumes:##
kubectl create clusterrole pv-reader --verb=get,list --resource=persistentvolumes

##Create a ClusterRoleBinding for the cluster role:##
kubectl create clusterrolebinding pv-test --clusterrole=pv-reader --serviceaccount=web:default

##The YAML for a pod that includes a curl and proxy container:##
apiVersion: v1
kind: Pod
metadata:
  name: curlpod
  namespace: web
spec:
  containers:
  - image: tutum/curl
    command: ["sleep", "9999999"]
    name: main
  - image: linuxacademycontent/kubectl-proxy
    name: proxy
  restartPolicy: Always

##Open a shell to the container:##
kubectl exec -it curlpod -n web -- sh

##Access PersistentVolumes (cluster-level) from the pod:##
curl localhost:8001/api/v1/persistentvolumes

##Use the following command to create the ClusterRole:##
kubectl create clusterrole pv-reader --verb=get,list --resource=persistentvolumes

##Use the following command to create the ClusterRoleBinding:##
kubectl create clusterrolebinding pv-test --clusterrole=pv-reader --serviceaccount=web:default

##Use the following YAML to create a pod that will proxy the connection and allow you to curl the address:##
apiVersion: v1
 kind: Pod
 metadata:
   name: curlpod
   namespace: web
 spec:
   containers:
   - image: tutum/curl
     command: ["sleep", "9999999"]
     name: main
   - image: linuxacademycontent/kubectl-proxy
     name: proxy
   restartPolicy: Always

##Use the following command (from within the pod) to access a shell from the pod:##
kubectl exec -it curlpod -n web -- sh

##Use the following command to curl the PV resource:##
curl localhost:8001/api/v1/persistentvolumes
