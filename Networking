-->Networking<--

##View the node's virtual network interfaces:##
ifconfig

##View the containers in the pod:##
docker ps

##Get the process ID for the container:##
docker inspect --format '{{ .State.Pid }}' [container_id]

##Use nsenter to run a command in the process's network namespace:##
nsenter -t [container_pid] -n ip addr

##Apply the Flannel CNI plugin:##
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml

##YAML for the nginx NodePort service:##
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport
spec:
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    app: nginx

##Get the services YAML output for all the services in your cluster:##
kubectl get services -o yaml

Try and ping the clusterIP service IP address:

##View the list of services in your cluster:##
kubectl get services

##View the list of endpoints in your cluster that get created with a service:##
kubectl get endpoints

##Look at the iptables rules for your services:##
sudo iptables-save | grep KUBE | grep nginx

##View the list of services:##
kubectl get services

##The load balancer YAML spec:##
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx

##Create a new deployment:##
kubectl run kubeserve2 --image=chadmcrowell/kubeserve2

##Scale the deployments to 2 replicas:##
kubectl scale deployment/kubeserve2 --replicas=2

##Create a load balancer from a deployment:##
kubectl expose deployment kubeserve2 --port 80 --target-port 8080 --type LoadBalancer

##View the services in your cluster:##
kubectl get services

##Watch as an external port is created for a service:##
kubectl get services -w

##Look at the YAML for a service:##
kubectl get services kubeserve2 -o yaml

##Curl the external IP of the load balancer:##
curl http://[external-ip]

##View the annotation associated with a service:##
kubectl describe services kubeserve

##Set the annotation to route load balancer traffic local to the node:##
kubectl annotate service kubeserve2 externalTrafficPolicy=Local

##The YAML for an Ingress resource:##
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: service-ingress
spec:
  rules:
  - host: kubeserve.example.com
    http:
      paths:
      - backend:
          serviceName: kubeserve2
          servicePort: 80
  - host: app.example.com
    http:
      paths:
      - backend:
          serviceName: nginx
          servicePort: 80
  - http:
      paths:
      - backend:
          serviceName: httpd
          servicePort: 80

##Edit the ingress rules:##
kubectl edit ingress

##View the existing ingress rules:##
kubectl describe ingress

##Curl the hostname of your Ingress resource:##
curl http://kubeserve2.example.com

##View the CoreDNS pods in the kube-system namespace:##
kubectl get pods -n kube-system

##View the CoreDNS deployment in your Kubernetes cluster:##
kubectl get deployments -n kube-system

##View the service that performs load balancing for the DNS server:##
kubectl get services -n kube-system

##Spec for the busybox pod:##
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - image: busybox:1.28.4
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always

##View the resolv.conf file that contains the nameserver and search in DNS:##
kubectl exec -it busybox -- cat /etc/resolv.conf

##Look up the DNS name for the native Kubernetes service:##
kubectl exec -it busybox -- nslookup kubernetes

##Look up the DNS names of your pods:##
kubectl exec -ti busybox -- nslookup [pod-ip-address].default.pod.cluster.local

##Look up a service in your Kubernetes cluster:##
kubectl exec -it busybox -- nslookup kube-dns.kube-system.svc.cluster.local

##Get the logs of your CoreDNS pods:##
kubectl logs [coredns-pod-name]

##YAML spec for a headless service:##
apiVersion: v1
kind: Service
metadata:
  name: kube-headless
spec:
  clusterIP: None
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: kubserve2

##YAML spec for a custom DNS pod:##
apiVersion: v1
kind: Pod
metadata:
  namespace: default
  name: dns-example
spec:
  containers:
    - name: test
      image: nginx
  dnsPolicy: "None"
  dnsConfig:
    nameservers:
      - 8.8.8.8
    searches:
      - ns1.svc.cluster.local
      - my.dns.search.suffix
    options:
      - name: ndots
        value: "2"
      - name: edns0

    3  kubectl run nginx --image=nginx
    4  kubectl get deployment
    5  kubectl expose deployment nginx --port 80 --type NodePort
    6  kubectl get service
    7  vi test.yaml
    8  kubectl create -f test.yaml
    9  kubectl get pods
   10  kubectl exec busybox -- nslookup  nginx
